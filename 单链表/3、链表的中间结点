876、链表的中间结点
【问题描述】
给你单链表的头结点 head ，请你找出并返回链表的中间结点。
如果有两个中间结点，则返回第二个中间结点。

示例 1：
输入：head = [1,2,3,4,5]
输出：[3,4,5]
解释：链表只有一个中间结点，值为 3 。

示例 2：
输入：head = [1,2,3,4,5,6]
输出：[4,5,6]
解释：该链表有两个中间结点，值分别为 3 和 4 ，返回第二个结点。

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */
struct ListNode* middleNode(struct ListNode* head) {
    struct ListNode *fast = head;       // 快指针
    struct ListNode *slow = head;       // 慢指针
    if(fast == NULL || fast->next == NULL){         // 没有结点或 一个结点
        return slow;
    }                             
    while(fast->next != NULL){          // 两个及以上的结点
        if(fast->next->next){           // 后面有两个结点以上
            fast = fast->next->next;    // 后面只有一个结点
        }
        else{
            fast = fast->next;
        }
        slow = slow->next;
    }
    return slow;
}

【看了评论可以更简洁】
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */
struct ListNode* middleNode(struct ListNode* head) {
    struct ListNode *fast = head;       // 快指针
    struct ListNode *slow = head;       // 慢指针
                           
    while(fast != NULL && fast->next != NULL){   // 至少有一个及以上的结点
        fast = fast->next->next;    // 移两步
        slow = slow->next;
    }
    return slow;
}
