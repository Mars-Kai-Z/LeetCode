21、合并两个有序链表
【问题描述】
将两个升序链表合并为一个新的 升序 链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。 

示例 1：
输入：l1 = [1,2,4], l2 = [1,3,4]
输出：[1,1,2,3,4,4]

示例 2：
输入：l1 = [], l2 = []
输出：[]

示例 3：
输入：l1 = [], l2 = [0]
输出：[0]

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */
struct ListNode* mergeTwoLists(struct ListNode* list1, struct ListNode* list2) {
    struct ListNode *l1 = list1, *l2 = list2;
    struct ListNode* new = NULL;  // 新链表的头
    struct ListNode* temp = NULL; // 串联指针

    if (!list1) {
        return list2;
    }
    if (!list2) {
        return list1;
    }

    new = temp = (struct ListNode*)malloc(sizeof(struct ListNode));

    while (list1 && list2) { // 当其中有一个链表完成，结束循环
        if (list1->val < list2->val) { // list1 的值小于list2 的值
            temp->next = list1;        // new 接上list1
            list1 = list1->next;       // list1 往后移
            temp = temp->next;
        } else {
            temp->next = list2;  // new 接上list2
            list2 = list2->next; // list2 往后移
            temp = temp->next;
        }
    }
    temp->next=list1?list1:list2;
    return new->next;
}

【评论区还有递归方法】
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */

struct ListNode* mergeTwoLists(struct ListNode* list1, struct ListNode* list2) {
    if (list1 == NULL) {
        return list2;
    }
    if (list2 == NULL) {
        return list1;
    }
    
    struct ListNode* mergedList;
    
    if (list1->val <= list2->val) {
        mergedList = list1;
        mergedList->next = mergeTwoLists(list1->next, list2);
    } else {
        mergedList = list2;
        mergedList->next = mergeTwoLists(list1, list2->next);
    }
    
    return mergedList;
}

作者：tt-1103
链接：https://leetcode.cn/problems/merge-two-sorted-lists/solutions/2512813/he-bing-you-xu-lian-biao-by-tt-1103-74r9/
来源：力扣（LeetCode）
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。
