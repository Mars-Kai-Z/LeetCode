OR36 链表的回文结构

https://www.nowcoder.com/practice/d281619e4b3e4a60a2cc66ea32855bfa?tpId=49&&tqId=29370&rp=1&ru=/activity/oj&qru=/ta/2016test/question-ranking

【问题描述】
对于一个链表，请设计一个时间复杂度为O(n),额外空间复杂度为O(1)的算法，判断其是否为回文结构。

给定一个链表的头指针A，请返回一个bool值，代表其是否为回文结构。保证链表长度小于等于900。

【注意】
1、空链表不算回文结构
2、有可能会想当然地利用中间结点的位置，应该将后面的链表翻转过来，在比较

// 2024/7/5：此处有一个错误，虽然碰巧通过所有测试用例，但是在调式时，发现明显不对
// 即： ListNode* first = A->next;      // 快指针
// 这里不应该是指向A的下一个结点，这样导致有偶数个结点时，找不到其中间结点
// 虽然碰巧通过所有测试用例，但不符合解题思路。
// 敲代码时还是要细心


/*
struct ListNode {
    int val;
    struct ListNode *next;
    ListNode(int x) : val(x), next(NULL) {}
};*/
#include <iostream>
class PalindromeList {
  public:
    bool chkPalindrome(ListNode* A) {
        // write code here
        // 使用三个指针，第一个为快指针每次走两步，
        // 第二个指针为慢指针每次走一步


        if (!A ){           // 空链表
            return false;
        }
        if( !A->next) {     // 只有一个链表
            return true;
        }

        ListNode* first = A->next;      // 快指针
        ListNode* sec = A;              // 慢指针
        ListNode* last = A;             //  第三个指针
        while (first && first->next) {  // 找到中间结点
            first = first->next->next;
            sec = sec->next;
        }

        ListNode* newList = nullptr;    // 反转链表的头指针
        ListNode* temp = nullptr;       // 临时指针
        while (sec) {
            temp = sec;
            sec = sec->next;

            temp->next = newList;
            newList = temp;
        }

        while (last) {       // 遍历last至结束
            if(last->val ==  newList->val){
                newList = newList->next;
                last = last->next;
            }
            else {
                return false;
            }
        }
        return true;
    }
};

// 2024 /7 /5：新的解法
// 找到中间结点后，将前后两个链表斩断
struct ListNode {
    int val;
    struct ListNode *next;
    ListNode(int x) : val(x), next(NULL) {}
};*/
#include <iostream>
class PalindromeList {
  public:
    bool chkPalindrome(ListNode* A) {

        ListNode* first = A;            // 快指针;注意这里不是first = A->next
        ListNode* sec = A;              // 慢指针
        ListNode* last = nullptr;       // 第三个指针
        while (first && first->next) {  // 找到中间结点
            last = sec;
            first = first->next->next;
            sec = sec->next;
        }
        last->next = nullptr;   // 将前后两个链表斩断

        ListNode* newList = nullptr;    // 反转链表的头指针
        ListNode* temp = nullptr;       // 临时指针
        while (sec) {
            temp = sec;
            sec = sec->next;

            temp->next = newList;
            newList = temp;
        }

        while (A) {       // 遍历A至结束；不能用newList因为可能会多一个结点
            if (A->val ==  newList->val) {
                newList = newList->next;
                A = A->next;
            } else {
                return false;
            }
        }
        return true;
    }
};

